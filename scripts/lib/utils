#!/usr/bin/env bash
GITROOT=$(git rev-parse --show-toplevel)
export GITROOT
# shellcheck disable=SC1091
. "${GITROOT}"/scripts/lib/strict-mode
strictMode

declare -a REQUIRED_FIELDS=(
  "name"
  "version"
  "release"
  "source"
  "vendor"
  "license"
  "description"
)

ANSI_NO_COLOR=$'\033[0m'

function msg_info() {
  local GREEN=$'\033[0;32m'
  printf "%s\n" "${GREEN}${*}${ANSI_NO_COLOR}" >&2
}

function msg_warn() {
  local YELLOW=$'\033[0;33m'
  printf "%s\n" "${YELLOW}${*}${ANSI_NO_COLOR}" >&2
}

function msg_error() {
  local RED=$'\033[0;31m'
  printf "%s\n" "${RED}${*}${ANSI_NO_COLOR}" >&2
}

function msg_fatal() {
  msg_error "${*}"
  exit 1
}

function cleanup () {
  parallel -j+0 --eta 'msg_info "Deleting {1} directory and compressed file"; rm -rf "{1}_DOWN"; rm -rf {1}' ::: "$(yq e ".packages[].name" packages.yaml)"
}

function download_and_build () {
  # Enable bash's unofficial strict mode
  strictMode

  local packages_yaml="${1}"
  local index="${2}"
  local fpm_tag="${3}"
  local name version release source vendor maintainer license description \
      downloaded_file fpm_opts
  name="$(yq e ".packages[${index}].name" "${packages_yaml}")"
  version="$(yq e ".packages[${index}].version" "${packages_yaml}")"
  release="$(yq e ".packages[${index}].release" "${packages_yaml}")"
  source="$(yq e ".packages[${index}].source" "${packages_yaml}")"
  maintainer="$(yq e ".packages[${index}].maintainer" "${packages_yaml}")"
  license="$(yq e ".packages[${index}].license" "${packages_yaml}")"
  description="$(yq e ".packages[${index}].description" "${packages_yaml}")"

  for field in "${REQUIRED_FIELDS[@]}"; do
    if [[ "$(yq e ".packages[${index}].${field}" "${packages_yaml}")" == 'null' ]]; then
      msg_fatal "[-] Package configuration for ${name} is missing the ${field} field. See this project's README for more details"
    fi
  done

  msg_info "Name is ${name}, Version is ${version}, Release is ${release}"
  msg_info "Source is ${source}"
  msg_info "Maintainer is ${maintainer}"
  msg_info "Vendor is ${vendor}, License is ${license}, Description is ${description}"

  downloaded_file="$(rev <<< "${source}" | cut -d '/' -f 1 | rev)"

  msg_info "Downloading ${name} version ${version}"

  curl -L "${source}" -o "${GITROOT}/${downloaded_file}"

  mkdir "${name}"

  msg_info "Extracting ${name} version ${version}"

  case "$(file "${downloaded_file}")" in
    ${downloaded_file}:\ gzip\ compressed\ data*)
    tar -xzvf "${downloaded_file}" -C "${name}"
    ;;
    ${downloaded_file}:\ POSIX\ tar\ archive*)
    tar -xzvf "${downloaded_file}" -C "${name}"
    ;;
    ${downloaded_file}:\ Zip\ archive\ data*)
    unzip "${downloaded_file}" -d "${name}"
    ;;
    *)
    cleanup
    msg_fatal "Unknown file type: $(uname)"
    ;;
  esac

  msg_info "Building ${name} version ${version}"
  fpm_opts="build-packages.sh -n ${name} -v ${version} -r ${release}"
  fpm_opts+=" -s ${source} -c ${vendor} -l ${license}"

  msg_info "fpm_opts are: ${fpm_opts}"
  docker run --rm \
      --entrypoint 'bash' \
      -v "${GITROOT}":/data \
      "${fpm_tag}" -c "${fpm_opts}"
}
